import subprocess
from csv import DictReader
import os
import sys
from distutils.version import LooseVersion

class Exploit_Library:
    """Variables"""
    exploits_csv = "./exploit_lib.csv"
    exploit_lib = []

    """Constructor"""
    def __init__(self):
        self.exploit_lib = self.load_exploits()

    """Methods"""
    def load_exploits(self):
        result = []
        with open(self.exploits_csv, "r") as f:
            reader = DictReader(f,  dialect='excel')
            result = list(reader)
        return result

    def is_exe(self, fpath):
        a = os.path.isdir(fpath)
        b = os.access(fpath, os.X_OK)
        return os.path.isdir(fpath) and os.access(fpath, os.X_OK)

    def is_target_vulnerable(self, os_version, exploit):  # if target os is vulnerable
        return os_version <= LooseVersion(exploit['target_os_version'])

    def check_if_application_exists(self, program):  # check if app exists ('ls' functionality in python)
        fpath, fname = os.path.split(program)
        if fpath:
            if self.is_exe(program):
                return program
        else:
            for path in os.environ["PATH"].split(os.pathsep):
                exe_file = os.path.join(path, program)
                if self.is_exe(exe_file):
                    return exe_file

        return None

    def check_if_prereqs_exists(self, app):  # prereq check for the xploit poc
        result = False
        app_exists = self.check_if_application_exists(app)
        if app_exists:
            result = self.check_application_version(app)
        return result

    def check_application_version(self, app):  # check if app's version holds
        app_path = app + "/Contents/Info"
        version = subprocess.run(["defaults", "read", app_path, "CFBundleShortVersionString"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return version.stdout.decode()

    def execute_poc(self, exploit): #Executes PoC File
        if "." in exploit["poc_path"]:
            dot_index = exploit["poc_path"].index(".")
            if exploit["poc_path"][dot_index:] == ".py":
                print("Executing Python File")
                poc_exe = subprocess.run(["python3", exploit["poc_path"]], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                print(poc_exe.stderr)
                print(poc_exe.stdout)
            elif exploit["poc_path"][dot_index:] == ".sh":
                print("Executing Sh File")
                poc_exe = subprocess.run(["sh", exploit["poc_path"]], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        else:
            poc_exe = subprocess.Popen(exploit["poc_path"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            res, err = poc_exe.communicate()

    def run_exploit(self, os_version, exploit):
        if self.is_target_vulnerable(os_version, exploit):  # check if target is vulnerable
            print("Dependency check...")
            if exploit["pre_req_needed"] == "False":  # pre-req check
                print("Executing Exploit...")
                self.execute_poc(exploit)
                return 1
            else:
                print(exploit["app_name"] + " - " + exploit["app_version"] + " is required, checking...")
                pre_reqs_exists = self.check_if_prereqs_exists(exploit["app_name"])
                if not pre_reqs_exists:
                    print("Required software not Found !!")
                    sys.exit()
                else:
                    print(exploit["app_name"] + " - " + exploit["app_version"] + " is found...")
                    print("Executing Exploit...")
                    self.execute_poc(exploit)
                    return 1
        else:
            print("Target OS is not vulnerable to %s") % exploit["name"]
            return -1

    def search_exploit(self, keyword):
        result = []
        index = 1
        print("Searching for an exploit that is linked with " + keyword + "...\n")
        for exp in self.exploit_lib:
            if keyword in exp['name'].lower() or keyword in exp['cve'].lower() or keyword in exp['app_name'].lower() or keyword in exp[
                'app_version'].lower() or keyword in exp['target_os_version'].lower():
                result.append((index, exp))
                index = index + 1
        if not result:
            print("Explit Not Found!!!")
        return result

